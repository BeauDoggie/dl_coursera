import os

from dl_coursera.markup import CML
from dl_coursera.define import Asset

_doc = '''<co-content><asset id="ZegWxLwaEeeBfg6A3Ng9Ng" name="miniproject_2" extension="zip" assetType="generic"/><heading level="2">Project Goals &amp; Outcomes</heading><text>In lectures this week, you learned about a new programming↵construct added in Java 8: streams. Java streams offer a functional way to↵perform operations over Java Collections, and include basically useful↵operations such as filter, map, reduce, and scan. </text><text>Parallel Java streams automatically parallelize the↵functional operations described above. A parallel Java stream is created by↵simply applying the parallel()↵operation to an existing Java stream. Any stream operation applied to a Java↵parallel stream may be executed using multiple threads as long as its parallel↵execution does not break the semantics of the operation.</text><text>In Demo Video 2 of Week 2, Professor Sarkar showed an↵example of analyzing student data using both imperative loops and functional↵streams, and showed how the parallel stream version was not only faster to↵finish but also much less verbose and error-prone. It is recommended you review↵this demo video before starting this mini-project.</text><text>In this mini-project, we will explore in that direction↵further by implementing parallel stream versions of several other imperative↵data analysis programs. Throughout this assignment you should feel free to↵refer to any useful Javadocs.</text><heading level="2">Project Setup</heading><text>Please refer to Mini-Project 0 for a↵description of the build and testing process used in this course.</text><text>Once you have downloaded and unzipped the provided project↵files using the gray button labeled miniproject_2.zip at the top of this description, you should see the project source code at:</text><text hasMath="true">$$\color{red}{\verb|miniproject_2/src/main/java/edu/coursera/parallel/StudentAnalytics.java|}$$</text><text>and the project tests at</text><text hasMath="true">$$\color{red}{\verb|miniproject_2/src/test/java/edu/coursera/parallel/StudentAnalyticsTest.java.|}$$</text><heading level="2">Project Instructions</heading><text>Your modifications should be done entirely inside of StudentAnalytics.java.↵You may not make any changes to the signatures of any public or protected↵methods inside of StudentAnalytics, or remove any of them. However, you are↵free to add any new methods you like. Any changes you make to StudentAnalyticsTest.java↵will be ignored in the final grading process.</text><text>Your main goals for this assignment are listed below.↵StudentAnalytics.java also contains helpful TODOs.</text><list bulletType="numbers"><li><text>Implement StudentAnalytics.averageAgeOfEnrolledStudentsParallelStream↵to perform the same operations as averageAgeOfEnrolledStudentsImperative↵but using parallel streams.</text></li><li><text>Implement StudentAnalytics. mostCommonFirstNameOfInactiveStudentsParallelStream↵to perform the same operations as mostCommonFirstNameOfInactiveStudentsImperative↵but using parallel streams.</text></li><li><text>Implement StudentAnalytics. countNumberOfFailedStudentsOlderThan20ParallelStream↵to perform the same operations as countNumberOfFailedStudentsOlderThan20Imperative↵but using parallel streams. Note that any grade below a 65 is considered a failing grade for the purpose of this method.</text></li></list><text>You are free to refer to any online documentation that you find helpful. In particular, the documentation of the Java Stream class may be useful:</text><text><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html">https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html</a></text><heading level="2">Project Evaluation</heading><text>Your assignment submission should consist of only the StudentAnalytics.java↵file that you modified to implement this mini-project. As before, you can upload this file through the assignment page for this mini-project. After that, the Coursera autograder will take over and assess your submission, which includes building your code and running it on one or more tests. Your submission will be evaluated on Coursera’s auto-grading system using 4 CPU cores. Note that the performance observed for tests on your local machine may differ from that on Coursera's auto-grading system, but that you will only be evaluated on the measured performance on Coursera. Also note that for all assignments in this course you are free to resubmit as many times as you like. See the Common Pitfalls page under Resources for more details. Please give it a few minutes to complete the grading. Once it has completed, you should see a score appear in the “Score” column of the “My submission” tab based on the following rubric:</text><list bulletType="bullets"><li><text>10% – correctness of your averageAgeOfEnrolledStudentsParallelStream↵implementation</text></li><li><text>10% – performance of your averageAgeOfEnrolledStudentsParallelStream↵implementation on 4 cores</text></li><li><text>20% – correctness of your mostCommonFirstNameOfInactiveStudentsParallelStream↵implementation</text></li><li><text>20% – performance of your mostCommonFirstNameOfInactiveStudentsParallelStream↵implementation on 4 cores</text></li><li><text>20% – correctness of your countNumberOfFailedStudentsOlderThan20ParallelStream↵implementation</text></li><li><text>20% – performance of your countNumberOfFailedStudentsOlderThan20ParallelStream↵implementation on 4 cores</text></li></list><text/><text/></co-content>'''


def main():
    cml = CML(_doc)
    assetIDs = cml.get_assetIDs()
    assets = [Asset(id_=id_, url="www.jodie.he", name="jodie.he") for id_ in assetIDs]
    html = cml.to_html(assets=assets)

    _outdir = '__data/example/'
    os.makedirs(_outdir, exist_ok=True)
    with open(os.path.join(_outdir, 'markup.html'), 'w', encoding="UTF-8") as ifs:
        ifs.write(html)


if __name__ == '__main__':
    main()
